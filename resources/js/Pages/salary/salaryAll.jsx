import Header from "@/Layouts/Header";
import Nav from "@/Layouts/Nav";
import { useState, useEffect } from "react";

const SalaryPage = ({
  user,
  notif,
  user_type,
  employees,
  salaries,
  salary,
  Employee,
  deductions
}) => {
  const [selectedEmployee, setSelectedEmployee] = useState("All Employees");
  const [selectedMonth, setSelectedMonth] = useState("2025-01");
  const [filteredSalaries, setFilteredSalaries] = useState([]);

  console.log("Employees:", employees);
  console.log("Salary Data:",deductions);

  // Create a mapping of employee IDs to their names
  const nameMap = employees.reduce((acc, emp) => {
    acc[emp.id] = emp.name;
    return acc;
  }, {});

  useEffect(() => {
    // Pre-calculate per day and hourly salary for all entries
    const calculateSalaries = () => {
      const updatedSalaries = salary?.map((sal) => {
        const generateDate = new Date(sal.generate_date);
        if (isNaN(generateDate)) return sal;

        const daysInMonth = new Date(
          generateDate.getFullYear(),
          generateDate.getMonth() + 1,
          0
        ).getDate();

        const totalAmount = parseFloat(sal.total_amount);
        if (isNaN(totalAmount)) return sal;

        const perDaySalary = totalAmount / daysInMonth;
        const hourlySalary = totalAmount / (daysInMonth * 8);

        return {
          ...sal,
          perDaySalary: perDaySalary.toFixed(2),
          hourlySalary: hourlySalary.toFixed(2),
        };
      });
      setFilteredSalaries(updatedSalaries);
    };

    calculateSalaries();
  }, [salary]);

  const handleSearch = () => {
    const filtered = salary.filter((sal) => {
      const matchesEmployee =
        selectedEmployee === "All Employees" ||
        nameMap[sal.employee_id] === selectedEmployee;
      const matchesMonth =
        !selectedMonth || sal.generate_date.startsWith(selectedMonth);
      return matchesEmployee && matchesMonth;
    });
    setFilteredSalaries(filtered);
  };

  return (
    <div className="flex flex-col w-full ml-[11.5rem]">
      <Header user={user} notif={notif} />
      <Nav user_type={user_type} />

      <div className="px-[5rem] py-4 w-full">
        <div className="px-10 py-6">
          <div className="flex items-center space-x-4 mb-6">
            {/* Employee Dropdown */}
            <select
              className="border p-2 rounded"
              value={selectedEmployee}
              onChange={(e) => setSelectedEmployee(e.target.value)}
            >
              <option value="All Employees">All Employees</option>
              {employees.map((emp) => (
                <option key={emp.id} value={emp.name}>
                  {emp.name}
                </option>
              ))}
            </select>

            {/* Month Input */}
            <input
              type="month"
              className="border p-2 rounded"
              value={selectedMonth}
              onChange={(e) => setSelectedMonth(e.target.value)}
            />

            {/* Search Button */}
            <button
              className="bg-blue-600 text-white p-2 rounded"
              onClick={handleSearch}
            >
              Search
            </button>
          </div>

          {/* Salary Table */}
          <div className="border rounded-lg shadow-md">
            <table className="w-full border-collapse">
              <thead className="bg-gray-100">
                <tr>
                  {/* <th className="border p-2 text-left">Employee Name</th> */}
                  <th className="border p-2 text-left">Salary Name</th>
                  <th className="border p-2 text-left">Generate Date</th>
                  <th className="border p-2 text-left">Status</th>
                  <th className="border p-2 text-left">Approved By</th>
                  <th className="border p-2 text-left">Approved Date</th>
                  <th className="border p-2 text-left">Generated By</th>
                  <th className="border p-2 text-left">Generated Date</th>
                  <th className="border p-2 text-left">Total Amount</th>
                  <th className="border p-2 text-left">Per Day Salary</th>
                  <th className="border p-2 text-left">Hourly Salary</th>
                </tr>
              </thead>
              <tbody>
                {filteredSalaries?.length > 0 ? (
                  filteredSalaries.map((sal) => {
                    // Get the employee name using employee_id
                    const employeeName = nameMap[sal.employee_id] || "Pinaki Ray";
                    console.log("kjh",employeeName)
                    return (
                      <tr key={sal.employee_id} className="hover:bg-gray-50">
                        {/* <td className="border p-2">{employeeName}</td> */}
                        <td className="border p-2">{sal.salary_name}</td>
                        <td className="border p-2">{sal.generate_date}</td>
                        <td
                          className={`border p-2 ${
                            sal.status === "Paid"
                              ? "text-green-600"
                              : "text-red-500"
                          }`}
                        >
                          {sal.status}
                        </td>
                        <td className="border p-2">{sal.approved_by}</td>
                        <td className="border p-2">{sal.approved_date}</td>
                        <td className="border p-2">{sal.generate_by}</td>
                        <td className="border p-2">{sal.generate_date}</td>
                        <td className="border p-2">
                          {new Intl.NumberFormat().format(sal.total_amount)}
                        </td>
                        <td className="border p-2">{sal.perDaySalary}</td>
                        <td className="border p-2">{sal.hourlySalary}</td>
                      </tr>
                    );
                  })
                ) : (
                  <tr>
                    <td
                      colSpan="11"
                      className="border p-2 text-center text-gray-500"
                    >
                      No salaries found.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SalaryPage;
